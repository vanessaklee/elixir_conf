# Nx / Explorer / Series

```elixir
Mix.install([
  {:explorer, "~> 0.2.0"},
  {:kino, "~> 0.6.2"}
])
```

## Goal

To gain an understand of and experience with series in Explorer.

Credit: this notebook is influenced by examples in the [Explorer repo](https://github.com/elixir-nx/explorer/tree/main/notebooks).

## Series

In (pandas)[https://pandas.pydata.org/], a `Series` is like a column in a table, a one-dimensional array capable of holding data. In (polars)[https://lib.rs/crates/polars], the Rust/Python DataFrame library, a `Series` is a single column in a DataFrame.

Similarly in `Explorer` A `DataFrame` is a row-aligned map of `Series`. `Series` can have the following `dtypes`:

- `:float` - 64-bit floating point number
- `:integer` - 64-bit signed integer
- `:boolean` - Boolean
- `:string` - UTF-8 encoded binary
- `:date` - Date type that unwraps to `Elixir.Date`
- `:datetime` - DateTime type that unwraps to `Elixir.NaiveDateTime`

<!-- livebook:{"break_markdown":true} -->

##### Make One

`Series` can be made from Elixir basic types. The `dtype` and size of the `Series` can be seen at the top of the output.

```elixir
alias Explorer.Series

s1 = Series.from_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
```

```elixir
s2 = Series.from_list(["a", "b", "c"])
```

```elixir
s3 = Series.from_list([~D[2011-01-01], ~D[1965-01-21]])
```

The printed values are limited to the first 50.

```elixir
Series.from_list(Enum.to_list(1..100))
```

Get only the specific details like `size` and `dtype` like this:

```elixir
Series.size(s3)
```

```elixir
Series.dtype(s3)
```

#### Nullability

Series can be nullable...

```elixir
s = Series.from_list([1.0, 2.0, nil, nil, 5.0])
```

...and the missing values may be filled in using one of the following strategies:

- `:forward` - replace nil with the previous value
- `:backward` - replace nil with the next value
- `:max` - replace nil with the series maximum
- `:min` - replace nil with the series minimum
- `:mean` - replace nil with the series mean

```elixir
Series.fill_missing(s, :mean)
```

#### Mixed Types

`Series` must all be of the same dtype or else you'll get an ArgumentError unless the dtype is numeric. .Mixed numeric types (i.e. integers and floats) will downcast to a float:

```elixir
Series.from_list([1, 2.0, 4, 5, 1.7])
```

#### Access

`Series` implements the `Access` protocol. You can slice and dice in many ways:

```elixir
s1
```

```elixir
s1[1]
```

```elixir
s1[-1]
```

```elixir
s1[0..4]
```

```elixir
s1[[0, 4, 4]]
```

#### Flip Flop

Reverse a `Series` or convert it to an Elixir list.

```elixir
Series.to_list(s1)
```

```elixir
Series.reverse(s1)
```

You can sort.

```elixir
1..100 |> Enum.to_list() |> Enum.shuffle() |> Series.from_list() |> Series.sort()
```

Or argsort.

```elixir
s = 1..100 |> Enum.to_list() |> Enum.shuffle() |> Series.from_list()
ids = Series.argsort(s)
```

And take only what you want.

```elixir
Series.take(s, ids)
```

#### Comparison

Compare `Series`

```elixir
s4 = Series.reverse(s1)

Series.equal(s1, s4)
```

```elixir
Series.equal(s1, 5)
```

```elixir
Series.not_equal(s1, 10)
```

```elixir
Series.greater_equal(s1, 4)
```

#### Arithmetic

Support for arithmatic such as addition, subtraction, multiplication, and division.

```elixir
Series.add(s1, s4)
```

```elixir
Series.subtract(s1, 4)
```

```elixir
Series.multiply(s1, s1)
```

```elixir
s5 = Series.from_list([50, 15, 10])

Series.divide(s5, 5)
```

Calculate cumulative values.

```elixir
s = 1..100 |> Enum.to_list() |> Series.from_list()
Series.cumulative_sum(s)
```

Rolling values.

```elixir
Series.window_sum(s, 4)
```

Count and list unique values.

```elixir
s = Series.from_list(["a", "b", "b", "c", "c", "c"])
Series.distinct(s)
```

```elixir
Series.n_distinct(s)
```

And you can even get a dataframe showing the counts for each distinct value.

```elixir
Series.count(s)
```

Which is a good time to move our focus to DataFrames in the next lesson.

<!-- livebook:{"break_markdown":true} -->

[<span style="float: left; color: #800080; font-weight: bold; font-family: FreeMono, monospace">< previous</span>](1_Explorer.livemd)

[<span style="float: right; color: #800080; font-weight: bold; font-family: FreeMono, monospace">next ></span>](3_Dataframes.livemd)
